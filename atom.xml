<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Micheal Yan&#39;s Blog</title>
  <subtitle>鄢钦明的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yanqinming.cn/"/>
  <updated>2017-08-14T13:49:51.000Z</updated>
  <id>http://yanqinming.cn/</id>
  
  <author>
    <name>Micheal Yan</name>
    <email>956462326@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在Java中使用正则表达式</title>
    <link href="http://yanqinming.cn/posts/cb6fd708/"/>
    <id>http://yanqinming.cn/posts/cb6fd708/</id>
    <published>2017-08-13T12:53:20.000Z</published>
    <updated>2017-08-14T13:49:51.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="我对正则表达式的理解"><a href="#我对正则表达式的理解" class="headerlink" title="我对正则表达式的理解"></a>我对正则表达式的理解</h2><p>正则表达式Regex(Regular Expression)，是一种通过定义由特定字符组成的表达式来对字符串进行匹配、查找、替换和切割的字符串操作工具。</p>
<h2 id="正则表达式中特定的一些字符"><a href="#正则表达式中特定的一些字符" class="headerlink" title="正则表达式中特定的一些字符"></a>正则表达式中特定的一些字符</h2><table>
<thead>
<tr>
<th style="text-align:left">表达式</th>
<th style="text-align:left">匹配内容</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">字符</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">x</td>
<td style="text-align:left">字符 x</td>
</tr>
<tr>
<td style="text-align:left">\</td>
<td style="text-align:left">反斜线字符</td>
</tr>
<tr>
<td style="text-align:left">\0n</td>
<td style="text-align:left">带有八进制值 0 的字符 n (0 &lt;= n &lt;= 7)</td>
</tr>
<tr>
<td style="text-align:left">\0nn</td>
<td style="text-align:left">带有八进制值 0 的字符 nn (0 &lt;= n &lt;= 7)</td>
</tr>
<tr>
<td style="text-align:left">\0mnn</td>
<td style="text-align:left">带有八进制值 0 的字符 mnn（0 &lt;= m &lt;= 3、0 &lt;= n &lt;= 7）</td>
</tr>
<tr>
<td style="text-align:left">\xhh</td>
<td style="text-align:left">带有十六进制值 0x 的字符 hh</td>
</tr>
<tr>
<td style="text-align:left">\uhhhh</td>
<td style="text-align:left">带有十六进制值 0x 的字符 hhhh</td>
</tr>
<tr>
<td style="text-align:left">\t</td>
<td style="text-align:left">制表符 (‘\u0009’)</td>
</tr>
<tr>
<td style="text-align:left">\n</td>
<td style="text-align:left">新行（换行）符 (‘\u000A’)</td>
</tr>
<tr>
<td style="text-align:left">\r</td>
<td style="text-align:left">回车符 (‘\u000D’)</td>
</tr>
<tr>
<td style="text-align:left">\f</td>
<td style="text-align:left">换页符 (‘\u000C’)</td>
</tr>
<tr>
<td style="text-align:left">\a</td>
<td style="text-align:left">报警 (bell) 符 (‘\u0007’)</td>
</tr>
<tr>
<td style="text-align:left">\e</td>
<td style="text-align:left">转义符 (‘\u001B’)</td>
</tr>
<tr>
<td style="text-align:left">\cx</td>
<td style="text-align:left">对应于 x 的控制符</td>
</tr>
<tr>
<td style="text-align:left">字符类</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">[abc]</td>
<td style="text-align:left">a、b 或 c（简单类）</td>
</tr>
<tr>
<td style="text-align:left">[^abc]</td>
<td style="text-align:left">任何字符，除了 a、b 或 c（否定）</td>
</tr>
<tr>
<td style="text-align:left">[a-zA-Z]</td>
<td style="text-align:left">a 到 z 或 A 到 Z，两头的字母包括在内（范围）</td>
</tr>
<tr>
<td style="text-align:left">[a-d[m-p]]</td>
<td style="text-align:left">a 到 d 或 m 到 p：[a-dm-p]（并集）</td>
</tr>
<tr>
<td style="text-align:left">[a-z&amp;&amp;[def]]</td>
<td style="text-align:left">d、e 或 f（交集）</td>
</tr>
<tr>
<td style="text-align:left">[a-z&amp;&amp;[^bc]]</td>
<td style="text-align:left">a 到 z，除了 b 和 c：[ad-z]（减去）</td>
</tr>
<tr>
<td style="text-align:left">[a-z&amp;&amp;[^m-p]]</td>
<td style="text-align:left">a 到 z，而非 m 到 p：[a-lq-z]（减去）</td>
</tr>
<tr>
<td style="text-align:left">预定义字符类</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">.</td>
<td style="text-align:left">任何字符（与行结束符可能匹配也可能不匹配）</td>
</tr>
<tr>
<td style="text-align:left">\d</td>
<td style="text-align:left">数字：[0-9]</td>
</tr>
<tr>
<td style="text-align:left">\D</td>
<td style="text-align:left">非数字： [^0-9]</td>
</tr>
<tr>
<td style="text-align:left">\s</td>
<td style="text-align:left">空白字符：[ \t\n\x0B\f\r]</td>
</tr>
<tr>
<td style="text-align:left">\S</td>
<td style="text-align:left">非空白字符：[^\s]</td>
</tr>
<tr>
<td style="text-align:left">\w</td>
<td style="text-align:left">单词字符：[a-zA-Z_0-9]</td>
</tr>
<tr>
<td style="text-align:left">\W</td>
<td style="text-align:left">非单词字符：[^\w]</td>
</tr>
<tr>
<td style="text-align:left">边界匹配器</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">^</td>
<td style="text-align:left">行的开头</td>
</tr>
<tr>
<td style="text-align:left">$</td>
<td style="text-align:left">行的结尾</td>
</tr>
<tr>
<td style="text-align:left">\b</td>
<td style="text-align:left">单词边界</td>
</tr>
<tr>
<td style="text-align:left">\B</td>
<td style="text-align:left">非单词边界</td>
</tr>
<tr>
<td style="text-align:left">\A</td>
<td style="text-align:left">输入的开头</td>
</tr>
<tr>
<td style="text-align:left">\G</td>
<td style="text-align:left">上一个匹配的结尾</td>
</tr>
<tr>
<td style="text-align:left">\Z</td>
<td style="text-align:left">输入的结尾，仅用于最后的结束符（如果有的话）</td>
</tr>
<tr>
<td style="text-align:left">\z</td>
<td style="text-align:left">输入的结尾</td>
</tr>
<tr>
<td style="text-align:left">Greedy数量词</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">X?</td>
<td style="text-align:left">X，一次或一次也没有</td>
</tr>
<tr>
<td style="text-align:left">X*</td>
<td style="text-align:left">X，零次或多次</td>
</tr>
<tr>
<td style="text-align:left">X+</td>
<td style="text-align:left">X，一次或多次</td>
</tr>
<tr>
<td style="text-align:left">X{n}</td>
<td style="text-align:left">X，恰好 n 次</td>
</tr>
<tr>
<td style="text-align:left">X{n,}</td>
<td style="text-align:left">X，至少 n 次</td>
</tr>
<tr>
<td style="text-align:left">X{n,m}</td>
<td style="text-align:left">X，至少 n 次，但是不超过 m 次</td>
</tr>
</tbody>
</table>
<h2 id="正则表达式在Java中的表现形式"><a href="#正则表达式在Java中的表现形式" class="headerlink" title="正则表达式在Java中的表现形式"></a>正则表达式在Java中的表现形式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public final class Pattern</div><div class="line">extends Object</div><div class="line">implements Serializable</div></pre></td></tr></table></figure>
<p><strong>Pattern正则表达式的编译表示形式。</strong></p>
<p>指定为字符串的正则表达式必须首先被编译为此类的实例。然后，可将得到的模式用于创建 Matcher 对象，依照正则表达式，该对象可以与任意字符序列匹配。执行匹配所涉及的所有状态都驻留在匹配器中，所以多个匹配器可以共享同一模式。</p>
<p>因此，典型的调用顺序是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Pattern p = Pattern.compile(&quot;a*b&quot;);</div><div class="line">Matcher m = p.matcher(&quot;aaaaab&quot;);</div><div class="line">boolean b = m.matches();</div></pre></td></tr></table></figure>
<p>在仅使用一次正则表达式时，可以方便地通过此类定义 matches 方法。此方法编译表达式并在单个调用中将输入序列与其匹配。语句</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">boolean b = Pattern.matches(&quot;a*b&quot;, &quot;aaaaab&quot;);</div></pre></td></tr></table></figure>
<p>等效于上面的三个语句，尽管对于重复的匹配而言它效率不高，因为它不允许重用已编译的模式。</p>
<h2 id="使用正则表达式对字符串进行匹配"><a href="#使用正则表达式对字符串进行匹配" class="headerlink" title="使用正则表达式对字符串进行匹配"></a>使用正则表达式对字符串进行匹配</h2><p>使用正则表达式对字符串进行匹配有三种方式：<br>1）使用字符串的对象的matches()方法<br>2）使用Matcher的对象的matches()方法<br>3）使用Pattern类的matches()方法<br>匹配的特点：<br>1）根据正则表达式的规则对整个字符串进行匹配<br>2）匹配结果返回对应的布尔值<br>使用方法：<br>请参考下面匹配字符串是否为电话号码的实例</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">public class MatchTest &#123;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        System.out.println(&quot;一，使用字符串的对象的matches()方法&quot;);</div><div class="line">        matchDemo_1(&quot;13805646681&quot;);</div><div class="line">        matchDemo_1(&quot;03805646681&quot;);</div><div class="line">        matchDemo_1(&quot;13805Jia681&quot;);</div><div class="line">        matchDemo_1(&quot;138056&quot;);</div><div class="line"></div><div class="line">        System.out.println(&quot;二，使用Matcher的对象的matches()方法&quot;);</div><div class="line">        matchDemo_2(&quot;13805646681&quot;);</div><div class="line">        matchDemo_2(&quot;03805646681&quot;);</div><div class="line">        matchDemo_2(&quot;13805Jia681&quot;);</div><div class="line">        matchDemo_2(&quot;138056&quot;);</div><div class="line"></div><div class="line">        System.out.println(&quot;三，使用Pattern类的matches()方法&quot;);</div><div class="line">        matchDemo_3(&quot;13805646681&quot;);</div><div class="line">        matchDemo_3(&quot;03805646681&quot;);</div><div class="line">        matchDemo_3(&quot;13805Jia681&quot;);</div><div class="line">        matchDemo_3(&quot;138056&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 匹配字符串是否为电话号码</div><div class="line">     * 匹配规则：</div><div class="line">     * 1.电话号码以数字1开头</div><div class="line">     * 2.电话号码长度为11</div><div class="line">     * 3.电话号码为全数字</div><div class="line">     * 对应的正则表达式：</div><div class="line">     * 1)&quot;1\\d&#123;10&#125;&quot;</div><div class="line">     * 解读：</div><div class="line">     *      正则表达是第一个数是1，所以它只能匹配以1开头的字符串；</div><div class="line">     *      \\d，因为Java中反斜杠会把它后面的字符进行转移，所以\\d就是正则表达式中预定义字符类中的\d(== [0-9]),即能够匹配数字0-9中的任意一个；</div><div class="line">     *      &#123;10&#125;，代表前面的\d恰好出现10次，这样加上第一个数1共有11个数字，所以它只能匹配长度为11且全部为数字的字符串。</div><div class="line">     * 2)&quot;1[0-9]&#123;10&#125;&quot;</div><div class="line">     * 解读：</div><div class="line">     *      \d == [0-9]</div><div class="line">     */</div><div class="line">    public static void matchDemo_1(String str) &#123;</div><div class="line">        String regex = &quot;1\\d&#123;10&#125;&quot;;</div><div class="line">        boolean isMatched = str.matches(regex);</div><div class="line">        System.out.println(str + (isMatched ? &quot;是电话号码&quot; : &quot;不是电话号码&quot;));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void matchDemo_2(String str) &#123;</div><div class="line">        String regex = &quot;1[0-9]&#123;10&#125;&quot;;</div><div class="line">        // 1，将正则表达式编译成Pattern对象</div><div class="line">        Pattern p = Pattern.compile(regex);</div><div class="line">        // 2, 与字符串进行关联，生成Matcher对象</div><div class="line">        Matcher m = p.matcher(str);</div><div class="line">        // 3，对字符串进行操作</div><div class="line">        boolean isMatched = m.matches();</div><div class="line">        System.out.println(str + (isMatched ? &quot;是电话号码&quot; : &quot;不是电话号码&quot;));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void matchDemo_3(String str) &#123;</div><div class="line">        String regex = &quot;1\\d&#123;10&#125;&quot;;</div><div class="line">        boolean isMatched = Pattern.matches(regex, str);</div><div class="line">        System.out.println(str + (isMatched ? &quot;是电话号码&quot; : &quot;不是电话号码&quot;));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用正则表达式对字符串进行替换"><a href="#使用正则表达式对字符串进行替换" class="headerlink" title="使用正则表达式对字符串进行替换"></a>使用正则表达式对字符串进行替换</h2><p>正则表达式既可以替换字符串中所有匹配到的字符，也可以只替换第一次匹配到的字符，对应的两个方法是replaceALL和replaceFirst,同样在String对象和Matcher对象中都包含这两个方法。<br>替换的特点：<br>1）可以将正则表达式匹配到的字符(串)替换为你指定的字符(串)<br>2）替换结果生成新的字符串<br>使用方法：<br>请参考下面叠词替换的实例</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">public class StackedWordsReplace &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        stackedWordsReplaceDemo_1();</div><div class="line">        stackedWordsReplaceDemo_2();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void stackedWordsReplaceDemo_1() &#123;</div><div class="line">        // 将下面的字符串转换成&quot;我要学习编程。&quot;</div><div class="line">        String str = &quot;我我我我我要要学学学编编编编程程程程。&quot;;</div><div class="line"></div><div class="line">        // 正则表达式中通过()创建一个捕获组</div><div class="line">        // 捕获组默认从1开始进行编号，可以通过从左到右计算开括号（左括号）个数和顺序进行排序</div><div class="line">        // 例如，在表达式 ((A)(B(C))) 中，存在四个这样的组：((A)(B(C)))、(A)、(B(C))、(C)</div><div class="line">        // 正则表达式中的\n和$n分别在匹配环节和替换环节中引用捕获组捕获的内容，n代表数字1、2、3...</div><div class="line">        // &quot;(.)\1+&quot;解读：</div><div class="line">        // .可以匹配任意字符,\\1即\1引用(.)的捕获内容，+前面的字符出现一次或多次。</div><div class="line">        // 比如,当.匹配的到我的时候\1就是我，所以这个表达式能够匹配到无数个我连续组成但最低不少两个我的字符串。</div><div class="line">        // $1为替换的类容，因为$1引用(.)的捕获内容，所以当.匹配到什么就替换为什么</div><div class="line">        str = str.replaceAll(&quot;(.)\\1+&quot;, &quot;$1&quot;);</div><div class="line"></div><div class="line">        System.out.println(str);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void stackedWordsReplaceDemo_2() &#123;</div><div class="line">        String str = &quot;我我我我我要要学学学编编编编程程程程。&quot;;</div><div class="line">        String regex = &quot;(.)\\1+&quot;;</div><div class="line">        Pattern pattern = Pattern.compile(regex);</div><div class="line">        Matcher matcher = pattern.matcher(str);</div><div class="line">        str = matcher.replaceAll(&quot;$1&quot;);</div><div class="line">        System.out.println(str);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用正则表达式对字符串进行切割"><a href="#使用正则表达式对字符串进行切割" class="headerlink" title="使用正则表达式对字符串进行切割"></a>使用正则表达式对字符串进行切割</h2><p>使用正则表达式对字符串进行切割有两种方式：<br>1）使用String对象的split方法<br>2）使用Pattern对象的split方法<br>切割的特点：<br>1）可以将正则表达式匹配到的字符(串)作为分隔符来对字符串进行切割<br>2）切割结果为子串组成的字符串数组<br>使用方法：<br>请参考下面的切割实例</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public class SplitTest &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        splitDemo_1();</div><div class="line">        splitDemo_2();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void splitDemo_1() &#123;</div><div class="line">        // 将下面的字符串以.为分隔符进行切割</div><div class="line">        // 由于在正则表达式中.为预定义字符，所以需要用\进行转义，</div><div class="line">        // 在Java中\也是转义字符，所以仍需要进行转义</div><div class="line">        String str = &quot;我.爱.中.国&quot;;</div><div class="line">        String regex = &quot;\\.&quot;;</div><div class="line">        String[] strings = str.split(regex);</div><div class="line">        for (String s : strings) &#123;</div><div class="line">            System.out.println(s);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void splitDemo_2() &#123;</div><div class="line">        String str = &quot;我.爱.中.国&quot;;</div><div class="line">        String regex = &quot;\\.&quot;;</div><div class="line">        Pattern pattern = Pattern.compile(regex);</div><div class="line">        String[] strings = pattern.split(str);</div><div class="line">        for (String s : strings) &#123;</div><div class="line">            System.out.println(s);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="综合案例演示"><a href="#综合案例演示" class="headerlink" title="综合案例演示"></a>综合案例演示</h2><p>下面将演示综合使用和切割来对IP地址进行排序</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">public class IPSort &#123;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        ipSort();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 将IP地址进行排序</div><div class="line">     */</div><div class="line">    public static void ipSort() &#123;</div><div class="line">        String ip = &quot;127.0.0.1 192.168.0.1 114.114.114.114 8.8.8.8 10.2.33.134 255.255.255.255&quot;;</div><div class="line"></div><div class="line">        // 1.将IP地址全部替换为xxx.xxx.xxx.xxx样式</div><div class="line">        ip = ip.replaceAll(&quot;\\w&#123;1,3&#125;&quot;, &quot;00$0&quot;); // 将IP地址每一段都添加00</div><div class="line">        System.out.println(ip);</div><div class="line">        ip = ip.replaceAll(&quot;0*(\\w&#123;3&#125;)&quot;, &quot;$1&quot;); // 去除每一段多余的0，是每一段只保留三位数字</div><div class="line">        System.out.println(ip);</div><div class="line"></div><div class="line">        // 2.对字符串进行排序</div><div class="line">        String[] arr = ip.split(&quot; &quot;);</div><div class="line">        System.out.println(Arrays.toString(arr));</div><div class="line">        Arrays.sort(arr);</div><div class="line">        for (String s : arr) &#123;</div><div class="line">            // 去除添加的0</div><div class="line">            s = s.replaceAll(&quot;0*(\\w+)&quot;, &quot;$1&quot;);</div><div class="line">            System.out.println(s);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用正则表达式对字符串进行查找"><a href="#使用正则表达式对字符串进行查找" class="headerlink" title="使用正则表达式对字符串进行查找"></a>使用正则表达式对字符串进行查找</h2><p>对字符串进行查找，主要用的是Matcher对象的以下方法：<br>1）find()尝试查找与该模式匹配的输入序列的下一个子序列<br>2）group()返回上一次匹配操作所匹配的输入子序列<br>3）reset(CharSequence input)将该模式应用到新的输入序列<br>查找的特点：<br>1）可以将正则表达式匹配到的字符(串)逐个找出来<br>2）查找结果为一个个匹配的子串<br>3）必须逐个查找，直接调用group()方法无法得到结果<br>使用方法：<br>请参考下面的爬去网页中的电子邮箱实例   </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">public class FindEmail &#123;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        findEmail();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void findEmail() &#123;</div><div class="line">        // 简单邮箱匹配规则</div><div class="line">        String reg = &quot;\\w+@\\w+(\\.\\w+)+&quot;;</div><div class="line">        // 1.将正则表达式编译成Pattern对象</div><div class="line">        Pattern p = Pattern.compile(reg);</div><div class="line">        Matcher m = null;</div><div class="line">        try &#123;</div><div class="line">            URL url = new URL(&quot;https://www.douban.com/group/topic/70867518/&quot;);</div><div class="line">            URLConnection connection = url.openConnection();</div><div class="line">            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));</div><div class="line">            String line = null;</div><div class="line">            while ((line = br.readLine()) != null) &#123;</div><div class="line">                // 2.将字符串和Pattern对象进行关联,生成Matcher对象</div><div class="line">                if (m == null) &#123;</div><div class="line">                    m = p.matcher(line);</div><div class="line">                &#125; else &#123;</div><div class="line">                    m.reset(line);</div><div class="line">                &#125;</div><div class="line">                // 3.通过Matcher对象对字符串进行操作</div><div class="line">                while (m.find()) &#123;</div><div class="line">                    System.out.println(m.group());</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; catch (MalformedURLException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; catch (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;我对正则表达式的理解&quot;&gt;&lt;a href=&quot;#我对正则表达式的理解&quot; class=&quot;headerlink&quot; title=&quot;我对正则表达式的理解&quot;&gt;&lt;/a&gt;我对正则表达式的理解&lt;/h2&gt;&lt;p&gt;正则表达式Regex(Regular Expression)，是一种通过定义
    
    </summary>
    
      <category term="Java" scheme="http://yanqinming.cn/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yanqinming.cn/tags/Java/"/>
    
      <category term="Regex" scheme="http://yanqinming.cn/tags/Regex/"/>
    
      <category term="正则表达式" scheme="http://yanqinming.cn/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客搭建之SEO搜索优化</title>
    <link href="http://yanqinming.cn/posts/3bc7d02e/"/>
    <id>http://yanqinming.cn/posts/3bc7d02e/</id>
    <published>2017-07-24T06:29:26.000Z</published>
    <updated>2017-07-24T09:40:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是-SEO？"><a href="#什么是-SEO？" class="headerlink" title="什么是 SEO？"></a>什么是 SEO？</h2><p>SEO 全称是 Search Engine Optimization，即搜索引擎优化。具体一点，就是说通过一些优化手段使得我们的博客的文章被搜索引擎收录（使我们的文章能够被其他人搜索到）以及在搜索引擎的排名更靠前。</p>
<h2 id="为什么要做-SEO-搜索优化？"><a href="#为什么要做-SEO-搜索优化？" class="headerlink" title="为什么要做 SEO 搜索优化？"></a>为什么要做 SEO 搜索优化？</h2><p>举个栗子，你同时在个人博客和其他博客平台发表同一篇文章，然后你在搜索引擎中搜索你发布文章，你会发现在其他博客平台发布的文章你能很快找到，而在个人博客发表的同一篇文章有可能排名靠后很难找到，或者根本就搜索不到。</p>
<h2 id="如何做-SEO-优化？"><a href="#如何做-SEO-优化？" class="headerlink" title="如何做 SEO 优化？"></a>如何做 SEO 优化？</h2><p>这里我们主要介绍的是通过向搜索引擎提交站点地图 sitemap（可方便网站管理员通知搜索引擎他们网站上有哪些可供抓取的网页）的方式。下面我就为大家演示一下，如何向 Google 提交我们的 sitemap。</p>
<h3 id="首先，利用-hexo-插件来为我们的博客自动生成-sitemap"><a href="#首先，利用-hexo-插件来为我们的博客自动生成-sitemap" class="headerlink" title="首先，利用 hexo 插件来为我们的博客自动生成 sitemap"></a>首先，利用 hexo 插件来为我们的博客自动生成 sitemap</h3><p>通过下面的操作安装配置好插件，在以后生成部署博客时就会自动为我们在网站的根目录下创建一个sitemap.xml文件。我们可以通过<code>http://你的网站地址/sitemap.xml</code>来访问这个文件，比如我的博客sitemap访问地址为<code>http://yanqinming.cn/sitemap.xml</code></p>
<p>1) 安装插件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-sitemap --save</div></pre></td></tr></table></figure>
<p>2) 配置插件</p>
<p>在站点配置文件(_config.yml)中添加如下代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sitemap:</div><div class="line">path: sitemap.xml</div></pre></td></tr></table></figure>
<h3 id="其次，向-Google-提交-sitemap"><a href="#其次，向-Google-提交-sitemap" class="headerlink" title="其次，向 Google 提交 sitemap"></a>其次，向 Google 提交 sitemap</h3><p>这里我先教大家如何判断自己的网站是否已经被搜索引擎收录，方法很简单，比如我想知道 Google 是否收录了我的博客，我只需要在 Google 的搜索框中敲入这段代码即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">格式形同：</div><div class="line">site:(your domain)</div><div class="line">比如我的博客就是：</div><div class="line">site:yanqinming.cn</div></pre></td></tr></table></figure>
<p>下面分别是我在 google 和 baidu 的实验结果截图，很明显我的博客网站已经被 google 收录了却没有被 baidu 收录，所以我在百度中是搜索不到我的博客文章的。（事实上，我向两个搜索引擎都提交了相对应的 sitemap，但是由于 GitHub 禁止了百度对 Pages 的爬取，所以百度依然搜索不到数据。解决方案，是使用百度的主动推送和自动推送。）<br><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fhv1sg22klj30o60dm0vo.jpg" alt=""><br><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fhv1sr1xf9j30lm0af0ue.jpg" alt=""><br>下面，我们正式开始介绍如何向 google 提交 sitemap。在上面第一张 google 的搜索截图中，我们看到第一条搜索结果和其他几条不同，点击进入就可以通过 <a href="https://www.google.com/webmasters/tools/home#utm_source=zh-CN-wmxmsg&amp;utm_medium=wmxmsg&amp;utm_campaign=bm&amp;authuser=0" rel="external nofollow noopener noreferrer" target="_blank">Google Search Console</a> 向 google 提交我们的博客网站的 sitemap。</p>
<p>1）登录谷歌账号</p>
<p>2）添加属性，如下图填入自己博客网站对应地址，然后点击添加属性提交<br><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fhv2dgftbwj313a0fogoa.jpg" alt=""></p>
<p>3）验证的您是网站的拥有者。这里我们选择HTML文件上传的方式，点击下载此 HTML 验证文件，下载验证文件，将它移动到我们的博客的source文件夹下，重新部署生成我们的博客，然后点击刚才页面最下方的验证按钮进行验证。接着，你会发现验证失败，因为 hexo 会对我们放在source文件夹下的文件进行处理（添加网页头部、评论等）。解决方案是在博客的配置文件中设置 skip_render，我采用的是最简单粗暴的方式，即设置对 source 文件夹下的所有html文件不做处理，具体代码为<code>skip_render: &#39;*.html&#39;</code>。设置完成后，按照上面的方式重新进行验证就可以了。<br><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fhv2vy0o35j30rd0kn420.jpg" alt=""></p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fhv2wedrk6j30gk05tweu.jpg" alt=""></p>
<p>4）提交 sitemap。上一步验证成功以后，点击继续就会跳转到下面的页面，点击下图中右下角的站点地图进行下一步操作。<br><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fhv2ztvkbbj312k0aiq4y.jpg" alt=""><br>点击右上角的的添加／测试站点地图的红色按钮，在输入框中填入 sitemap.xml，然后点击提交按钮即可。<br><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fhv35d4wnvj31210i30ux.jpg" alt=""><br>提交成功后，刷新页面如下图。<br><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fhv38vo2ubj312g0h6tbh.jpg" alt=""></p>
<h3 id="最后，过段时间（不会立即显示）利用上一步判断网站是否被收录的方法进行验证。"><a href="#最后，过段时间（不会立即显示）利用上一步判断网站是否被收录的方法进行验证。" class="headerlink" title="最后，过段时间（不会立即显示）利用上一步判断网站是否被收录的方法进行验证。"></a>最后，过段时间（不会立即显示）利用上一步判断网站是否被收录的方法进行验证。</h3><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上面演示了如何向 google 提交 sitemap 来优化博客在 google 搜索结果，向其他搜索引擎提交 sitemap 的原理相同，你可以尝试一下向百度提交<a href="http://zhanzhang.baidu.com/linksubmit/index" rel="external nofollow noopener noreferrer" target="_blank">飞机直达</a>。前面我们也提到了GitHub Pages 禁止了百度爬虫爬取的解决方案，具体方法请您自行Google或者百度一下。<br>其他的SEO优化方案，我了解的有：<br>1）文章链接唯一化，请搜索“hexo-abbrlink”<br>2）添加蜘蛛协议，请搜索“hexo robots.txt”<br>3）限制出站链接,请搜索“hexo-autonofollow”</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是-SEO？&quot;&gt;&lt;a href=&quot;#什么是-SEO？&quot; class=&quot;headerlink&quot; title=&quot;什么是 SEO？&quot;&gt;&lt;/a&gt;什么是 SEO？&lt;/h2&gt;&lt;p&gt;SEO 全称是 Search Engine Optimization，即搜索引擎优化。具体一
    
    </summary>
    
      <category term="Hexo" scheme="http://yanqinming.cn/categories/Hexo/"/>
    
    
      <category term="Hexo博客搭建" scheme="http://yanqinming.cn/tags/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
      <category term="SEO搜索优化" scheme="http://yanqinming.cn/tags/SEO%E6%90%9C%E7%B4%A2%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>JDBC简单使用总结</title>
    <link href="http://yanqinming.cn/posts/7933063e/"/>
    <id>http://yanqinming.cn/posts/7933063e/</id>
    <published>2017-07-22T02:28:50.000Z</published>
    <updated>2017-07-22T14:04:59.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是-JDBC？"><a href="#什么是-JDBC？" class="headerlink" title="什么是 JDBC？"></a>什么是 JDBC？</h2><p>JDBC 的全称是 Java Database Connectivity，即Java数据库连接，它是一种可以执行 SQL 语句的 Java API。</p>
<h2 id="为什么要使用-JDBC？"><a href="#为什么要使用-JDBC？" class="headerlink" title="为什么要使用 JDBC？"></a>为什么要使用 JDBC？</h2><p>通过使用 JDBC，就可以使用同一种 API 访问不同的数据库系统。换言之，无论你使用什么类型的数据库，只要根据 JDBC API 编写一套数据库操作逻辑。</p>
<h2 id="如何使用-JDBC-去操作数据库？"><a href="#如何使用-JDBC-去操作数据库？" class="headerlink" title="如何使用 JDBC 去操作数据库？"></a>如何使用 JDBC 去操作数据库？</h2><h3 id="1，加载数据库驱动。"><a href="#1，加载数据库驱动。" class="headerlink" title="1，加载数据库驱动。"></a>1，加载数据库驱动。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 加载驱动</div><div class="line">Class.forName(driverClass);</div></pre></td></tr></table></figure>
<p>例如加载 MySQL 驱动，首先搜索“MySQL JDBC 驱动”下载驱动jar包，然后导入到工程中，最后在 Java 代码中调用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 加载 MySQL 驱动</div><div class="line">Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</div></pre></td></tr></table></figure>
<h3 id="2，通过-DriverManager-获取数据库连接"><a href="#2，通过-DriverManager-获取数据库连接" class="headerlink" title="2，通过 DriverManager 获取数据库连接"></a>2，通过 DriverManager 获取数据库连接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 获取数据库连接</div><div class="line">DriverManager.getConnection(String url, String user, String password);</div></pre></td></tr></table></figure>
<p>例如我想连接我的 MySQL 数据库中的 Test 数据库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String url = &quot;jdbc:mysql://127.0.0.1:3306/Test&quot;; // 连接指定数据库的 URL，不同数据库的连接 URL，可通过查看相应的数据库驱动文档</div><div class="line">String user = &quot;root&quot;; // 登录数据库的用户名</div><div class="line">String password = &quot;123456&quot;; // 登录数据库的密码</div><div class="line">Connection conn = DriverManager.getConnection(url, user, password); // 返回 Connection 对象</div></pre></td></tr></table></figure>
<h3 id="3，通过-Connection-对象创建-Statement-对象"><a href="#3，通过-Connection-对象创建-Statement-对象" class="headerlink" title="3，通过 Connection 对象创建 Statement 对象"></a>3，通过 Connection 对象创建 Statement 对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 这里我们创建一个基本的 Statement 对象</div><div class="line">Statement stmt = conn.createStatement();</div></pre></td></tr></table></figure>
<h3 id="4，使用-Statement-执行-SQL-语句"><a href="#4，使用-Statement-执行-SQL-语句" class="headerlink" title="4，使用 Statement 执行 SQL 语句"></a>4，使用 Statement 执行 SQL 语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// Statement 有三种执行 SQL 语句的方法,通常我们使用比较多的是executeQuery()方法，</div><div class="line">// 执行 select 方法，返回查询到的结果集 ResultSet。</div><div class="line">String selectSql = &quot;select * from table1&quot;;</div><div class="line">ResultSet rs = stmt.executeQuery(selectSql);</div><div class="line">*/</div></pre></td></tr></table></figure>
<h3 id="5，对执行结果进行处理"><a href="#5，对执行结果进行处理" class="headerlink" title="5，对执行结果进行处理"></a>5，对执行结果进行处理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 通常使用 while 循环对结果进行遍历，</div><div class="line">// 并在循环体中通过 ResultSet 的一系列getXxx(列索引 or 列名)</div><div class="line">// 来获取查询表中指定列的值，进行业务逻辑处理。</div><div class="line">while (rs.next()) &#123;</div><div class="line">	// 比如这里我对结果进行输出打印</div><div class="line">	System.out.println(rs.getString(1) + rs.getInt(1));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="6，回收数据库资源，包括关闭ResultSet、Statement和Connection等资源。"><a href="#6，回收数据库资源，包括关闭ResultSet、Statement和Connection等资源。" class="headerlink" title="6，回收数据库资源，包括关闭ResultSet、Statement和Connection等资源。"></a>6，回收数据库资源，包括关闭ResultSet、Statement和Connection等资源。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rs.close();</div><div class="line">stmt.close();</div><div class="line">conn.close();</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是-JDBC？&quot;&gt;&lt;a href=&quot;#什么是-JDBC？&quot; class=&quot;headerlink&quot; title=&quot;什么是 JDBC？&quot;&gt;&lt;/a&gt;什么是 JDBC？&lt;/h2&gt;&lt;p&gt;JDBC 的全称是 Java Database Connectivity，即Java
    
    </summary>
    
      <category term="Java" scheme="http://yanqinming.cn/categories/Java/"/>
    
    
      <category term="Java数据库连接" scheme="http://yanqinming.cn/tags/Java%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5/"/>
    
      <category term="JDBC" scheme="http://yanqinming.cn/tags/JDBC/"/>
    
  </entry>
  
  <entry>
    <title>使用XML定义选项菜单</title>
    <link href="http://yanqinming.cn/posts/a4a7bc15/"/>
    <id>http://yanqinming.cn/posts/a4a7bc15/</id>
    <published>2017-07-21T01:28:37.000Z</published>
    <updated>2017-07-21T01:33:26.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="何为选项菜单？"><a href="#何为选项菜单？" class="headerlink" title="何为选项菜单？"></a>何为选项菜单？</h3><blockquote>
<p>选项菜单是某个Activity的主菜单项，供您放置对应用产生全局影响的操作，如“搜索”、“撰写电子邮件”和设置。选项菜单中的项目在屏幕上的显示位置取决于您开发应用所使用的 Android 版本：</p>
<ul>
<li><p>如果您开发的应用适用于 Android 2.3.x （API 级别10）或更低版本，选项菜单的内容会出现在屏幕底部如下图所示，且当菜单项超过6个时，则会讲第六项和其余项目放入溢出菜单（即图中的 More 菜单项）中。<br><img src="https://ww3.sinaimg.cn/large/006tNbRwgy1fcos1fqfvpj305k099mxz.jpg" alt=""></p>
</li>
<li><p>如果您开发的应用适用于 Android 3.0 （API 级别 11）及更高版本，选项菜单的内容将出现在应用栏中如下图所示。默认情况下，系统会将所有的菜单项放入操作溢出菜单（即图中标号为3的菜单项）中。<br><img src="https://ww1.sinaimg.cn/large/006tKfTcgy1fcorocpxm5j30bw05ztab.jpg" alt=""></p>
</li>
</ul>
</blockquote>
<h3 id="创建menu资源文件"><a href="#创建menu资源文件" class="headerlink" title="创建menu资源文件"></a>创建menu资源文件</h3><p>首先我在 app/src/mian/res/menu/ 目录下创建一个 my_menu.xml 文件</p>
<p>内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</div><div class="line"></div><div class="line">    &lt;item</div><div class="line">        android:id=&quot;@+id/item1&quot;</div><div class="line">        android:icon=&quot;@mipmap/ic_launcher&quot;</div><div class="line">        android:title=&quot;item1&quot;/&gt;</div><div class="line"></div><div class="line">    &lt;item</div><div class="line">        android:id=&quot;@+id/item2&quot;</div><div class="line">        android:icon=&quot;@mipmap/ic_launcher&quot;</div><div class="line">        android:title=&quot;item2&quot;/&gt;</div><div class="line"></div><div class="line">    &lt;group</div><div class="line">        android:id=&quot;@+id/group&quot;</div><div class="line">        android:checkableBehavior=&quot;single&quot;&gt;</div><div class="line">        &lt;item</div><div class="line">            android:id=&quot;@+id/group_item1&quot;</div><div class="line">            android:icon=&quot;@mipmap/ic_launcher&quot;</div><div class="line">            android:title=&quot;group_item1&quot;/&gt;</div><div class="line"></div><div class="line">        &lt;item</div><div class="line">            android:id=&quot;@+id/group_item2&quot;</div><div class="line">            android:icon=&quot;@mipmap/ic_launcher&quot;</div><div class="line">            android:title=&quot;group_item2&quot;/&gt;</div><div class="line">    &lt;/group&gt;</div><div class="line"></div><div class="line">    &lt;item</div><div class="line">        android:id=&quot;@+id/submenu&quot;</div><div class="line">        android:title=&quot;submenu_title&quot;&gt;</div><div class="line">        &lt;menu&gt;</div><div class="line">            &lt;item</div><div class="line">                android:id=&quot;@+id/submenu_item1&quot;</div><div class="line">                android:title=&quot;submenu_item1&quot;/&gt;</div><div class="line">        &lt;/menu&gt;</div><div class="line">    &lt;/item&gt;</div><div class="line"></div><div class="line">&lt;/menu&gt;</div></pre></td></tr></table></figure>
<p>从代码中我们可以看出，菜单资源文件以<code>&lt;menu&gt;</code>为根节点，使用<code>&lt;item&gt;</code>元素来定义菜单项。同时，我们也可以选择使用<code>&lt;group&gt;</code>元素来定义一个组，来对组内的菜单项的一些特性进行统一的修改，比如是否可见。最后，可以看到我们以在<code>&lt;item&gt;</code>元素中嵌套<code>&lt;menu&gt;</code>元素的方式来创建子菜单。</p>
<p><code>&lt;item&gt;</code>元素的常用属性：</p>
<ul>
<li>android:id 为菜单项指定一个唯一标识</li>
<li>android:title 指定菜单项的标题</li>
<li>android:icon 指定菜单项的图标</li>
<li>android:showAsAction 指定菜单项作为操作项目显示在应用栏的时间和方式</li>
</ul>
<p><code>&lt;group&gt;</code>元素的常用属性</p>
<ul>
<li>android:id 为改组菜单指定一个唯一标识</li>
<li>android:checkableBehavior 指定改组菜单的选择行为</li>
<li>android:visible 指定改组菜单是否可见</li>
<li>android:enable 指定改组菜单是否可用</li>
</ul>
<p>更详细的介绍请参考<a href="https://developer.android.com/guide/topics/resources/menu-resource.html" rel="external nofollow noopener noreferrer" target="_blank">API文档Menu部分</a>。</p>
<h3 id="加载menu资源文件"><a href="#加载menu资源文件" class="headerlink" title="加载menu资源文件"></a>加载menu资源文件</h3><p>通过重写 onCreateOptionsMenu() 方法，来为 Activity 指定选项菜单。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean onCreateOptionsMenu(Menu menu) &#123;</div><div class="line">        MenuInflater inflater = getMenuInflater();</div><div class="line">        inflater.inflate(R.menu.my_menu, menu);</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行效果：</p>
<p><img src="https://ww3.sinaimg.cn/large/006tNbRwgy1fcow44lkyqg30ba0h8mzc.gif" alt=""></p>
<h3 id="处理点击事件"><a href="#处理点击事件" class="headerlink" title="处理点击事件"></a>处理点击事件</h3><p>当我们从选项菜单中选择项目时，系统将调用 Activity 的 onOptionsItemSelected() 方法。 此方法将传递所选的 MenuItem，可以通过调用 getItemId() 方法来识别项目，该方法将返回菜单项的唯一 ID（由菜单资源中的 android:id 属性定义）。 我们可以将此 ID 与已知的菜单项匹配，以执行适当的操作。例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean onCreateOptionsMenu(Menu menu) &#123;</div><div class="line">        MenuInflater inflater = getMenuInflater();</div><div class="line">        inflater.inflate(R.menu.my_menu, menu);</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean onOptionsItemSelected(MenuItem item) &#123;</div><div class="line">        switch (item.getItemId()) &#123;</div><div class="line">            case R.id.group_item1:</div><div class="line">                item.setChecked(true);</div><div class="line">                return true;</div><div class="line">            case R.id.group_item2:</div><div class="line">                item.setChecked(true);</div><div class="line">                return true;</div><div class="line">            default:</div><div class="line">                Toast.makeText(this, &quot;selected &quot; + item.getTitle(), Toast.LENGTH_SHORT).show();</div><div class="line">                return super.onOptionsItemSelected(item);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行效果：</p>
<p><img src="https://ww1.sinaimg.cn/large/006tNbRwgy1fcown7lxkwg30ba0h8ad1.gif" alt=""></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文主要初步的介绍了如何使用 XML 定义选项菜单，定义其他类型菜单的方法类似。更深入的了解和使用菜单请参考<a href="https://developer.android.com/guide/topics/ui/menus.html#options-menu" rel="external nofollow noopener noreferrer" target="_blank">Android官方教程</a>。关于即便设置showAsAction=”always”，items仍然在overflow中显示的问题，请参考<a href="http://www.cnblogs.com/izhanjun/p/4187678.html" rel="external nofollow noopener noreferrer" target="_blank">这篇文章</a>。</p>
<p>ps:欢迎留言交流，共同进步。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;何为选项菜单？&quot;&gt;&lt;a href=&quot;#何为选项菜单？&quot; class=&quot;headerlink&quot; title=&quot;何为选项菜单？&quot;&gt;&lt;/a&gt;何为选项菜单？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;选项菜单是某个Activity的主菜单项，供您放置对应用产生全局影响的操作
    
    </summary>
    
      <category term="android" scheme="http://yanqinming.cn/categories/android/"/>
    
    
      <category term="android" scheme="http://yanqinming.cn/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yanqinming.cn/posts/4a17b156/"/>
    <id>http://yanqinming.cn/posts/4a17b156/</id>
    <published>2017-04-30T10:41:04.000Z</published>
    <updated>2017-05-02T07:43:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" rel="external nofollow noopener noreferrer" target="_blank">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" rel="external nofollow noopener noreferrer" target="_blank">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" rel="external nofollow noopener noreferrer" target="_blank">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" rel="external nofollow noopener noreferrer" target="_blank">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" rel="external nofollow noopener noreferrer" target="_blank">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" rel="external nofollow noopener noreferrer" target="_blank">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" rel="external nofollow noopener noreferrer" target="_blank">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" rel="external nofollow noopener noreferrer" target="_blank">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Hexo&lt;/a&gt;! This is your very first post.
    
    </summary>
    
      <category term="Hexo" scheme="http://yanqinming.cn/categories/Hexo/"/>
    
    
      <category term="Hello World" scheme="http://yanqinming.cn/tags/Hello-World/"/>
    
      <category term="Test" scheme="http://yanqinming.cn/tags/Test/"/>
    
  </entry>
  
</feed>
